This file is for my own quick note-taking. Don't expect it to be organized or even make sense at times.

use venv

important: can i subclass discord.Member to make TrackedMember?
> i have no idea what im doing <

open source:
    document all documentable things with docstrings or whatever they're called

OCR scan screen mode (a binary that communicates with the bot so you don't have to run the whole bot locally?)

easier `tldr`-like instructions in control panel for its usage

add reindex tracked members command:
    resets the tracked members indexes in control panel
    moves all AWAY members to the bottom?
    reaction should be the one currently for "reset dead", and reset dead should have another emoji
    i should probably re-add .list property to tracked members so we can still track members that have left muted (to unmute them when then join a voice channel) but hide them in the control panel

add unignore all members in vc command + reaction

make ControlPanel a class? (everything is an object??)

make the bot work on dedicated servers with multiple channels:
    multiple self.text_channels and bound voice_channels
    among:assign (only command necessary): tracks the authors voice channel and sends a control panel to the channel where it was sent

maybe DO remember members and their states?
    so we can still unmute members who left muted

control panel:
    mention username killing/ignoring
    allow multiple numbers (space-separated) in same message

untrack/unmute tracked people everytime a new vc is set # does this already happen?
    new method reset()?

once tracked, only mute inside of channel and unmute elsewhere # tis gon be real slow

setting up:
    append command output/responses to the top of control_panel (chronological still lol) instead of responding. also, delete command messages
    maybe resend the control panel after every message or something idk make the control panel stay at the bottom ughgh

commands for all reactions (maybe not):
    among:mute/among:unmute and the like
    maybe a new Action class that sets up reaction listening, default reaction sending (the reaction sent by the bot to the control panel) and respective commands

voice presence:
    new reaction: joins the voice channel
    when on the vc, plays sounds before muting and after unmuting everyone

reaction: admin-takeover
    AKA among:takeover
    only act when admin reacts/sends commands
    needs a prepared admin role set up with among:admin_role (actually maybe the API provides a way to see if the user is admin)

